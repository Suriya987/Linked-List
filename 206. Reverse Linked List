Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []



Approach : REcursive

Time complexity : O(N)
Space Complexity : O(N) stack space 

class Solution {
public:
    ListNode* reverse(ListNode* head)
    {
         //base case
           if(head==NULL || head->next==NULL)  return head;

           ListNode* newHead=reverse(head->next);
            ListNode* front = head->next;
            front->next=head;
            head->next=NULL;

            return newHead;

    }
    ListNode* reverseList(ListNode* head) {

       ListNode* temp=head;
        return reverse(temp);
}
