Implement the Least Recently Used (LRU) cache class LRUCache. The class should support the following operations

LRUCache(int capacity) Initialize the LRU cache of size capacity.
int get(int key) Return the value corresponding to the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the introduction of the new pair causes the cache to exceed its capacity, remove the least recently used key.
A key is considered used if a get or a put operation is called on it.

Ensure that get and put each run in 
O
(
1
)
O(1) average time complexity.

Example 1:

Input:
["LRUCache", [2], "put", [1, 10],  "get", [1], "put", [2, 20], "put", [3, 30], "get", [2], "get", [1]]

Output:
[null, null, 10, null, null, 20, -1]

Explanation:
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 10);  // cache: {1=10}
lRUCache.get(1);      // return 10
lRUCache.put(2, 20);  // cache: {1=10, 2=20}
lRUCache.put(3, 30);  // cache: {2=20, 3=30}, key=1 was evicted
lRUCache.get(2);      // returns 20 
lRUCache.get(1);      // return -1 (not found)


Soln:

 struct Node
    {
        int key;
        int val;
        Node* prev;
        Node* next;
        Node(int k,int v) : key(k) , val(v),prev(nullptr) , next(nullptr)
        {
        }
    };

class LRUCache {
private:
    
    int limit;   
    unordered_map<int,Node*> nodes;
    Node* left;
    Node* right;

    void remove(Node* node)
    {
       Node* prev=node->prev;
       Node* next=node->next;
       prev->next=next;
       next->prev=prev;
    }

    void insert(Node* node)
    {//always checks how many nodes involved and we make connect or not ?
        Node* prev=right->prev;
        prev->next=node;
        node->prev=prev;
        node->next=right;
        right->prev=node;
    }
  public:
    LRUCache(int capacity) 
    {
       limit=capacity;
       nodes.clear();
       left=new Node(0,0);
       right=new Node(0,0);
       left->next=right;
       right->prev=left;  //connecting both nodes
    }
    
    int get(int key)
    {
        if(nodes.find(key)==nodes.end())
        {
            return -1;
        }
        Node* temp=nodes[key];
        remove(temp);
        insert(temp);//always add fresh when any thing we used 
        return temp->val;
    }
    //
    void put(int key, int value) 
    {
        //if the key already present make sure first remove that
        if(nodes.find(key)!=nodes.end())
        {
            remove(nodes[key]);
        }
        Node* newNode=new Node(key,value);
        //i need to add before checking the size , so that i am get the error,prev
       nodes[key]=newNode;
       insert(newNode);
       

        if(nodes.size()>limit)
        {
            Node* lru=left->next;
            remove(lru);
            // remove(left->next);
            nodes.erase(lru->key);//removing from the hashmap
            delete lru;//deleting from the memory
        }
       

    }


};
