Given a singly linked list, delete middle of the linked list. For example, if given linked list is 1->2->3->4->5 then linked list should be modified to 1->2->4->5.
If there are even nodes, then there would be two middle nodes, we need to delete the second middle element.
For example, if given linked list is 1->2->3->4->5->6 then it should be modified to 1->2->3->5->6.
If the input linked list has 1 node, then it should return NULL


Input:
LinkedList: 1->2->3->4->5
Output: 1 2 4 5

Time Complexity : O(N)
Space Complexity : O(1)

class Solution{
    public:
    Node* deleteMid(Node* head)
    {
       Node* temp=head;
       
       //find the length of the linked list
       //check for the length is even or odd
       //run another loop for finding the middle element
       
       int len=0;
       
       while(temp)
       {
           len++;
           temp=temp->next;
       }
       
       int chk=len/2;
      
      chk+=1;
       len=1; //becoz i am starting from 2 node 
       Node* temp1=head;
       Node* prev=head;
       temp1=temp1->next;
       while(temp1)
       {
           len++;
           if(len==chk) 
           {
             prev->next=temp1->next;
             return head;
           }
           prev=prev->next;
           temp1=temp1->next;
       }  
    }
};
