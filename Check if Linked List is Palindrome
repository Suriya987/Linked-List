Given a singly linked list of size N of integers. The task is to check if the given linked list is palindrome or not.

Input:
N = 3
value[] = {1,2,1}
Output: 1

Brute Force:

Time complexity : O(N)
Space Complexity : O(N) -> stack space

class Solution{
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //traverse each node and store it in the Stack
        //using 2 pointer we will find .
        
            // vector<int>node;
            
         stack<int> node;  
        
        Node*temp=head;
        
        //pushing the elements into the vector
        while(temp){
            node.push(temp->data);
            temp=temp->next;
        }
       
       temp=head;
       
        while(temp)
        {
          int val= node.top();
          node.pop();
          
          if(temp->data != val)
            return false;
            
            temp=temp->next;
        }
        return true;
    }
};

Optimization:

Time Complexity: ~ O(N)
Space Complexitu : O(1)


class Solution{
  public:
    //Function to check whether the list is palindrome.
    Node *reverse(Node *head)
    {
        Node *curr = head, *prev = NULL;
        
        while(curr != NULL)
        {
            Node *temp = curr -> next;
            curr -> next = prev;
            prev = curr;
            curr = temp;
        }
        
        return prev;
    }
    
    Node *middle(Node *head)
    {
        if(head == NULL)
        {
            return head;
        }
        
        Node *slow = head, *fast = head;
        
        while(fast != NULL && fast -> next != NULL && fast -> next->next != NULL)
        {
            slow = slow -> next;
            fast = fast -> next->next;
        }
        
        return slow;
    }
    
    bool isPalindrome(Node *head1)
    {
       // Node* head1=head;
        if(head1 == NULL || head1 -> next == NULL)
        {
            return true;
        }
        
        Node* temp=head1;
        Node *mid = middle(head1);
        
        Node *head = mid -> next;
        mid -> next = NULL;
        
        Node* head2 = reverse(head);
        
        while(head1 != NULL && head2 != NULL)
        {
            if(head1 -> data != head2 -> data)
            {
                return false;
            }
            
            head1 = head1 -> next;
            head2 = head2 -> next;
        }
        
        return true;
    }
};
