Source : GFG

Given two decimal numbers represented by two linked lists of size N and M respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null.
Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. 
You are required to return the head of the linked list 2->1->5->null.

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).

Time Complexity : O(Max(N,M) 
Space Complexity : O(Max(N,M)  -> for storing results  technically i am not using any extra space 

class Solution
{
    //function to reverse the list
    Node* reverse(struct Node* head)
    {
         Node* prev=NULL;
         
         while(head)
         {
             Node* curr=new Node(head->data);
             
             curr->next=prev;
             prev=curr;
             head=head->next;
         }
         return prev;
    }
    public:

    struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
          // i need to reverse the both lists 
          // have a carry for the values which is crossing single digit
          //until carry hold the value we need to make connection in the list
          
          Node* h1=reverse(first);
          Node* h2=reverse(second);
          
          Node* resHead=new Node(0);
          Node* temp=resHead;
          
          Node* temp1=h1;
          Node* temp2=h2;
          
       
          
          int carry = 0;
          
          int val1=0;
          int val2=0;
          
          while(temp1 || temp2 || carry>0)
          {
              if(temp1 && temp2)
              {
               val1=temp1->data;
               val2=temp2->data;
               temp1=temp1->next;
               temp2=temp2->next;
              }
              else if(temp1 && temp2==NULL)
              {
                  val1=temp1->data;
                  val2=0;
                  temp1=temp1->next;
              }
              else if(temp1==NULL && temp2)
              {
                  val1=0;
                  val2=temp2->data;
                  temp2=temp2->next;
              }
              else
              {
                  val1=0;
                  val2=0;
              }
              
              int add=val1+val2+carry;
              //check for carry
              carry=add/10;
              
              int data=add%10;
              
              Node* newNode=new Node(data);
              
              if(temp==NULL)
              {
                  temp=newNode;
                  temp->next=NULL;
              }
              else
              {
                  temp->next=newNode;
                  temp=temp->next;
              }
             
              
          }
          temp->next=NULL;
     
          Node* re=reverse(resHead->next);
          
          return re;
             
    }
};


Approach : 

int carry=0;
         ListNode* newHead=new ListNode(0);
         ListNode* temp=newHead;
         int val1,val2=0;
         while(carry || l1 || l2)  
         {
             if(l1)
              val1=l1->val;
              if(l2)
              val2=l2->val;
              int sum=val1+val2+carry;
             carry=sum/10;
             sum=sum%10;

            temp->next=new ListNode(sum);
            temp=temp->next;
            if(l1)
            l1=l1->next;
            if(l2)
            l2=l2->next;

            val1=0;
            val2=0;
             
         }
         return newHead->next;
