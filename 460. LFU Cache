Design and implement a data structure for a Least Frequently Used (LFU) cache.

Implement the LFUCache class:

LFUCache(int capacity) Initializes the object with the capacity of the data structure.
int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.
void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.
To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.

When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.

The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, 3, null, -1, 3, 4]

Explanation
// cnt(x) = the use counter for key x
// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)
LFUCache lfu = new LFUCache(2);
lfu.put(1, 1);   // cache=[1,_], cnt(1)=1
lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1
lfu.get(1);      // return 1
                 // cache=[1,2], cnt(2)=1, cnt(1)=2
lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.
                 // cache=[3,1], cnt(3)=1, cnt(1)=2
lfu.get(2);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,1], cnt(3)=2, cnt(1)=2
lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.
                 // cache=[4,3], cnt(4)=1, cnt(3)=2
lfu.get(1);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,4], cnt(4)=1, cnt(3)=3
lfu.get(4);      // return 4
                 // cache=[4,3], cnt(4)=2, cnt(3)=3


Soln:

struct Node
{
    int data;
    int key;
    int freq;
    list<Node*>::iterator it;
    Node(int Keys,int val):key(Keys),data(val),freq(1)
    {
    }
};

class LFUCache {
private:
    unordered_map<int,Node*>cache;
    unordered_map<int,list<Node*>>freqMap;
    int minfreq;
    int cap;

public:
    LFUCache(int capacity) {
        cap=capacity;
        minfreq=0;
    }
    
    int get(int key) {
        //remove the node from the minfreq list 

        if(cache.find(key)==cache.end())
        {
            return -1;
        }

        Node* node=cache[key];
        int  fr=node->freq;  //get the frq of the node so we findout in the frmap

        //remove the node from the curren list
        freqMap[fr].erase(node->it);

        //update the minfreq
        if(freqMap[fr].size()==0){
         freqMap.erase(fr);
         if(fr==minfreq)
          minfreq++;
        }

       node->freq++;

       //insert the node into new freq list
       freqMap[node->freq].push_back(node);
       //we need to update the iterator for finding out this node in the future
       node->it=--freqMap[node->freq].end();
       return node->data;

    }
    
    void put(int key, int value) {
        //check the key is already if present remove that and add new
        //add in the minfreque
        //check the minfreq variable to update that
        //after adding the list chekc the size it exceeds or not 
 
       if(cache.find(key)!=cache.end())
       {
          Node* node=cache[key];
           node->data=value;
           get(key);//for updating the counter
           return;
       }

       
         if(cache.size()>=cap)
         {
            //remove the least recently used node
            Node* nodeToRemove=freqMap[minfreq].front(); 
            freqMap[minfreq].pop_front();
            cache.erase(nodeToRemove->key);
            delete nodeToRemove;
         }


       //create a node
         Node* newNode=new Node(key,value);
         cache[key]=newNode;
         freqMap[1].push_back(newNode);//this will add the node in the list which is there
         newNode->it=--freqMap[1].end();
          minfreq=1;
         
         //check for the limit reach
       
    }
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
