You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.
Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []

Soln:

Time complexity : O(KN) 
Space compelxity : O(1)

//TC Calculation
1.mergeList function:
Merges two sorted lists in O(n + m) time where n and m are the lengths of the two lists
This is standard merge operation from Merge Sort
2.mergeKLists function:
Merges lists in a sequential pairwise fashion

Time Complexity Calculation
Let's consider:
k = number of lists (length of lists vector)
N = total number of nodes across all lists

You're merging a growing merged list (length ≈ (i*N/k)) with the next list (length ≈ N/k)
Total operations: N/k + (N/k + N/k) + (2N/k + N/k) + ... + ((k-1)N/k + N/k)
This sums to O(kN) time complexity

N/K means -> In the worst case where all lists are equal size (n = N/k): lists size 10 and each list is 10 size right?

Number of lists (k) = 10
Each list size (n) = 10 nodes
Total nodes (N) = k × n = 100

Your Current Linear Merging Approach:
Merge List1 (10) + List2 (10) → 20 operations
Merge result (20) + List3 (10) → 30 operations
Merge result (30) + List4 (10) → 40 operations
Merge result (90) + List10 (10) → 100 operations

Total operations:
20 + 30 + 40 + ... + 100
= 10 × (20 + 100)/2 = 600 operations
= O(kN) = O(10×100) = O(1000) (constant factors differ)

what is the formula here?

The formula used here is the sum of an arithmetic series, which calculates the total of a sequence of numbers where each term increases by a constant difference.

s=m/2 x (firstterm+lastterm);
m = number of terms
First term = starting value of the series
Last term = ending value of the series
Common difference = fixed amount added between terms (here, +10)

Applied to Your Example:

You have the sequence:
20, 30, 40, ..., 100
First term (a₁) = 20
Last term (aₙ) = 100
Common difference (d) = 10 (20-30)
Number of terms (m) = ?

find the number m

an=a1+(m-1)xd

100=20+(m-1)x10;
80=(m-1 )x10;
80/10=m-1
8+1=m
m=9

arithmetic formula 
s=m/2x(a1+an) = 9/2 x (20+100)
s=4.5 x 120
s=540 operations

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeList(ListNode* head1,ListNode* head2)
    {
        ListNode* head=new ListNode(0,nullptr);
        ListNode* temp=head;
        while(head1 && head2)
        {
            if(head1->val < head2->val)
            {
                temp->next=head1;
                head1=head1->next;
            }
            else
            {
                temp->next=head2;
                head2=head2->next;
            }
            temp=temp->next;
            
        }

        while(head1)
        {
            temp->next=head1;
            temp=temp->next;
            head1=head1->next;
        }

        while(head2)
        {
            temp->next=head2;
            temp=temp->next;
            head2=head2->next;
        }
        return head->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
          ListNode* left=nullptr;
          ListNode* right=nullptr;
        int len=lists.size();
          for(int i=0;i<len;i++)
          {
            if(left==nullptr)
            left=lists[i];
            else if(right==nullptr)
            right=lists[i];

            if(left && right)
            {
                left=mergeList(left,right);
                right=nullptr;
            }
          }
          return left;
    }
    
};






