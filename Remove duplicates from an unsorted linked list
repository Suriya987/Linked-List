Source : GFG

Given an unsorted linked list of N nodes. The task is to remove duplicate elements from this unsorted Linked List. When a value appears in multiple nodes, 
the node which appeared first should be kept, all others duplicates are to be removed.

Input:
N = 4
value[] = {5,2,2,4}

Output: 5 2 4

Explanation:Given linked list elements are
5->2->2->4, in which 2 is repeated only.
So, we will delete the extra repeated
elements 2 from the linked list and the
resultant linked list will contain 5->2->4


Approach : Using hash Map

Time Complexity : O(N)
Space Complexity : O(N) 

class Solution
{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) 
    {
         unordered_map<int,int> mp;
         
         Node* curr=head;
         Node* prev=curr;
         
         mp[prev->data]=1;
         
         curr=curr->next;
         
         while(curr)
         {
             if(mp.find(curr->data)==mp.end())
             {
                mp[curr->data]=1;
                prev=prev->next;
             }
            else
            {
                prev->next=curr->next;
            }
              
             
             curr=curr->next;
             //prev=prev->next;
         }
         prev->next=NULL;
         return head;
    }
};

Approach : using Hash Set

Time Complexity : O(N)
Space Complexity : O(N) 

class Solution { 
    public:
//Function to remove duplicates from unsorted linked list.
Node * removeDuplicates( Node *head) 
{
    //using set to store already seen values in list. 
unordered_set<int> seen; 
//using two pointers one of which stores first node other null. 
struct Node *curr = head; 
struct Node *prev = NULL; 
//traversing over the linked list.
while (curr != NULL) 
{ 
    //if data at current node is already present in set, we skip the 
    //current node and store the node next to current in link of prev. 
    if (seen.find(curr->data) != seen.end())
    {
        prev->next = curr->next; 
    //deleting current node which contains duplicates. 
    delete (curr); 
        
    } 
    //else we just insert the data at current node in set and update 
    //prev to the current node.
    else 
    { 
        seen.insert(curr->data); 
        prev = curr;
        } 
        //updating current to the next node of prev node. 
        curr = prev->next; 
    
}
return head; 
    
} 
    
};
